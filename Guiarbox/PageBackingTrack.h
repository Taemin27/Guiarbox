#ifndef PAGE_BACKING_TRACK_H
#define PAGE_BACKING_TRACK_H

// 'Backing Track', 160x80px
const unsigned char backingTrackHome [] = {
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xff, 0xff, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x70, 0x00, 0x00, 0x03, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 
	0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x38, 0x00, 0x00, 0x0e, 0x40, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x38, 0x00, 0x00, 0x0e, 0x20, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x38, 
	0x01, 0xc0, 0x0e, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x02, 0x00, 0x0f, 0xf8, 0x00, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x1e, 0x3c, 0x00, 0x20, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x30, 0x06, 0x00, 0x20, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 
	0x60, 0x03, 0x00, 0x20, 0x1f, 0xe0, 0x00, 0x00, 0x01, 0x80, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x02, 0x00, 0xc0, 0x01, 0x80, 0x20, 0x1f, 0xf0, 0x00, 0x00, 0x01, 0x80, 0x60, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0xc0, 0x01, 0x80, 0x20, 0x18, 0x38, 0x00, 0x00, 
	0x01, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0xc1, 0xc1, 0x80, 0x20, 
	0x18, 0x18, 0x00, 0x00, 0x01, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x01, 
	0x83, 0xe0, 0xc0, 0x20, 0x18, 0x18, 0x3f, 0x01, 0xe1, 0x87, 0x63, 0x78, 0x1e, 0xc0, 0x00, 0x00, 
	0x00, 0x00, 0x02, 0x01, 0x83, 0xe0, 0xc0, 0x20, 0x18, 0x38, 0xff, 0x87, 0xf1, 0x8e, 0x63, 0xfc, 
	0x3f, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x02, 0x01, 0x83, 0xe0, 0xc0, 0x20, 0x1f, 0xf0, 0xc1, 0x86, 
	0x39, 0x9c, 0x63, 0x8e, 0x31, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0xc1, 0xc1, 0x80, 0x20, 
	0x1f, 0xf0, 0x01, 0x8c, 0x19, 0xb8, 0x63, 0x06, 0x60, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 
	0xc0, 0x01, 0x80, 0x20, 0x18, 0x18, 0x0f, 0x8c, 0x01, 0xf0, 0x63, 0x06, 0x60, 0xc0, 0x00, 0x00, 
	0x00, 0x00, 0x02, 0x00, 0xc0, 0x01, 0x80, 0x20, 0x18, 0x0c, 0x7f, 0x8c, 0x01, 0xf8, 0x63, 0x06, 
	0x60, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x60, 0x03, 0x00, 0x20, 0x18, 0x0c, 0xf1, 0x8c, 
	0x01, 0x98, 0x63, 0x06, 0x60, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x30, 0x06, 0x00, 0x20, 
	0x18, 0x0c, 0xc1, 0x8c, 0x19, 0x8c, 0x63, 0x06, 0x60, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 
	0x1e, 0x3c, 0x00, 0x20, 0x18, 0x1c, 0xc3, 0x86, 0x39, 0x8e, 0x63, 0x06, 0x31, 0xc0, 0x00, 0x00, 
	0x00, 0x00, 0x02, 0x00, 0x0f, 0xf8, 0x00, 0x20, 0x1f, 0xf8, 0xff, 0x87, 0xf1, 0x86, 0x63, 0x06, 
	0x3f, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x01, 0xc0, 0x00, 0x20, 0x1f, 0xf0, 0x7c, 0xc3, 
	0xe1, 0x87, 0x63, 0x06, 0x1e, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x20, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 
	0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x61, 0xc0, 0x00, 0x00, 
	0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x7f, 0x80, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x1f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x20, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 
	0x03, 0xe0, 0x00, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x02, 0x00, 0x1f, 0xfc, 0x00, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x7c, 0x1f, 0x00, 0x20, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0xe0, 0x03, 0x80, 0x20, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x01, 
	0x80, 0x00, 0xc0, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x02, 0x03, 0x00, 0x00, 0x60, 0x20, 0x00, 0x0f, 0xff, 0x00, 0x00, 0x00, 0x01, 0x80, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x03, 0x00, 0x00, 0x60, 0x20, 0x00, 0x0f, 0xff, 0x00, 
	0x00, 0x00, 0x01, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x06, 0x00, 0x00, 0x30, 0x20, 
	0x00, 0x00, 0x60, 0x00, 0x00, 0x00, 0x01, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x06, 
	0x00, 0x00, 0x30, 0x20, 0x00, 0x00, 0x60, 0x00, 0x00, 0x00, 0x01, 0x80, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x02, 0x06, 0x01, 0xc0, 0x30, 0x20, 0x00, 0x00, 0x60, 0x6e, 0x3f, 0x01, 0xe1, 0x87, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x0c, 0x03, 0xe0, 0x18, 0x20, 0x00, 0x00, 0x60, 0x7e, 
	0xff, 0x87, 0xf1, 0x8e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x0c, 0x07, 0xf0, 0x18, 0x20, 
	0x00, 0x00, 0x60, 0x70, 0xc1, 0x86, 0x39, 0x9c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x0c, 
	0x07, 0xf0, 0x18, 0x20, 0x00, 0x00, 0x60, 0x60, 0x01, 0x8c, 0x19, 0xb8, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x02, 0x0c, 0x07, 0xf0, 0x18, 0x20, 0x00, 0x00, 0x60, 0x60, 0x0f, 0x8c, 0x01, 0xf0, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x0c, 0x03, 0xe0, 0x18, 0x20, 0x00, 0x00, 0x60, 0x60, 
	0x7f, 0x8c, 0x01, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x06, 0x01, 0xc0, 0x30, 0x20, 
	0x00, 0x00, 0x60, 0x60, 0xf1, 0x8c, 0x01, 0x98, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x06, 
	0x00, 0x00, 0x30, 0x20, 0x00, 0x00, 0x60, 0x60, 0xc1, 0x8c, 0x19, 0x8c, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x02, 0x06, 0x00, 0x00, 0x30, 0x20, 0x00, 0x00, 0x60, 0x60, 0xc3, 0x86, 0x39, 0x8e, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x03, 0x00, 0x00, 0x60, 0x20, 0x00, 0x00, 0x60, 0x60, 
	0xff, 0x87, 0xf1, 0x86, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x03, 0x00, 0x00, 0x60, 0x20, 
	0x00, 0x00, 0x60, 0x60, 0x7c, 0xc3, 0xe1, 0x87, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x01, 
	0x80, 0x00, 0xc0, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x02, 0x00, 0xe0, 0x03, 0x80, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x7c, 0x1f, 0x00, 0x20, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x1f, 0xfc, 0x00, 0x20, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 
	0x03, 0xe0, 0x00, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x02, 0x38, 0x00, 0x00, 0x0e, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x38, 0x00, 0x00, 0x0e, 0x20, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x38, 0x00, 0x00, 0x0e, 0x40, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 
	0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x60, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0xff, 0xff, 0xfc, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};

int backingTrack_cursorLoc = 0;
bool backingTrack_valueSelected = false;

bool backingTrack_on = false;
bool backingTrack_loopTrack = false;
int backingTrack_fileIndex = 0;
int backingTrack_volume = 10;
int backingTrack_previousPosition = 0;

void backingTrack_setup() {
  display.fillScreen(BLACK);
  display.drawBitmap(0, 0, backingTrackHome, 160, 80, WHITE);
  drawArrows();
  display.display();
}

void backingTrack_loop() {
  bounce.update();
  if(bounce.changed() && bounce.read() == LOW) {
    if(!pageSelected) {
      pageSelected = true;
      backingTrack_refresh();
    }
    else if(pageSelected) {
      switch(backingTrack_cursorLoc) {
        case 0:
          pageSelected = false;
          backingTrack_setup();
          break;
        case 2:
          backingTrack_previousTrack();
          backingTrack_refresh();
          break;
        case 3:
          backingTrack_on = !backingTrack_on;
          if(backingTrackPlayWav.isStopped()) {
            backingTrackPlayWav.play(("backingtracks/" + backingTrack_files[backingTrack_fileIndex]).c_str());
          }
          else {
            backingTrackPlayWav.togglePlayPause();
          }

          backingTrack_refresh();
          break;
        case 4:
          backingTrack_nextTrack();
          backingTrack_refresh();
          break;
        default:
          backingTrack_valueSelected = !backingTrack_valueSelected;
          backingTrack_refresh();
          break;
      }
    }
  }

  if (pageSelected) {
    // Encoder
    int encoder = readEncoder();
    if(encoder == 0) {
      
    }
    else {
      // Right
      if(encoder == 1) {
        if(backingTrack_valueSelected) {
          switch(backingTrack_cursorLoc) {
            case 1:
              if (backingTrack_fileIndex < backingTrack_lastIndex) {
                backingTrack_fileIndex ++;
                backingTrackPlayWav.stop();
                backingTrack_previousPosition = 0;
              }
              break;
            case 5:
              if(backingTrack_volume < 10) {
                backingTrack_volume ++;
              }
              break;
          }
        }
        else {
          if(backingTrack_cursorLoc < 5) {
            backingTrack_cursorLoc ++;
          }
        }
      }

      // Left
      else if(encoder == -1) {
        if(backingTrack_valueSelected) {
          switch(backingTrack_cursorLoc) {
            case 1:
              if (backingTrack_fileIndex > 0) {
                backingTrack_fileIndex --;
                backingTrackPlayWav.stop();
                backingTrack_previousPosition = 0;
              }
              break;
            case 5:
              if(backingTrack_volume > 0) {
                backingTrack_volume --;
              }
              break;
          }
        }
        else {
          if(backingTrack_cursorLoc > 0) {
            backingTrack_cursorLoc --;
          }
        }
      }
      backingTrack_refresh();
      display.display();
    }
  }

  // Update progress bar every 1 second
  if (!backingTrackPlayWav.isStopped()) {
    int position = backingTrackPlayWav.positionMillis();
    if ((position - backingTrack_previousPosition) >= 1000) {
      backingTrack_previousPosition = position;
      backingTrack_drawProgressBar();
      display.display();
    }
  }
}


void backingTrack_refresh() {
  if (backingTrackPlayWav.isStopped() && backingTrack_on) {
    backingTrackPlayWav.play(("backingtracks/" + backingTrack_files[backingTrack_fileIndex]).c_str());
  }
  masterMixer.gain(1, float(backingTrack_volume)/20);

  // UI
  display.fillScreen(BLACK);
  display.setTextColor(WHITE, BLACK);
  display.setTextSize(1);

  display.setCursor(0, 0);
  display.print("<<<");
  display.setCursor(0, 10);
  display.print("File: ");
  if (!backingTrack_files.empty()) {
    display.println(backingTrack_files[backingTrack_fileIndex]);
  }

  // Previous button
  display.fillTriangle(18, 22, 18, 38, 10, 30, WHITE);
  display.fillRect(6, 22, 4, 16, WHITE);

  // Play button
  if (backingTrack_on) {
    display.fillRect(48, 22, 4, 16, WHITE);
    display.fillRect(57, 22, 4, 16, WHITE);
  }
  else {
    display.fillTriangle(47, 22, 47, 38, 62, 30, WHITE);
  }

  // Next button
  display.fillTriangle(92, 22, 92, 38, 100, 30, WHITE);
  display.fillRect(100, 22, 4, 16, WHITE);

  // Volume
  display.drawBitmap(120, 24, Volume, 14, 12, WHITE);
  display.setCursor(140, 26);
  display.print(String(backingTrack_volume) + " ");



   // Selection highlight
  display.setTextColor(BLUE, BLACK);
  switch(backingTrack_cursorLoc) {
    case 0:
      display.setCursor(0, 0);
      display.print("<<<");
      break;
    case 1:
      if (backingTrack_valueSelected) {
        display.fillRect(36, 10, 124, 8, BLACK);
        display.setCursor(36, 10);
        display.print(backingTrack_files[backingTrack_fileIndex]);
      }
      else {
        display.setCursor(0, 10);
        display.print("File: ");
      }
      break;
    case 2:
      display.fillTriangle(18, 22, 18, 38, 10, 30, BLUE);
      display.fillRect(6, 22, 4, 16, BLUE);
      break;
    case 3:
      if (backingTrack_on) {
        display.fillRect(48, 22, 4, 16, BLUE);
        display.fillRect(57, 22, 4, 16, BLUE);
      }
      else {
        display.fillTriangle(47, 22, 47, 38, 62, 30, BLUE);
      }
      break;
    case 4:
      display.fillTriangle(92, 22, 92, 38, 100, 30, BLUE);
      display.fillRect(100, 22, 4, 16, BLUE);
      break;
    case 5:
      if (backingTrack_valueSelected) {
        display.setCursor(140, 26);
        display.print(String(backingTrack_volume) + " ");
      }
      else {
        display.drawBitmap(120, 24, Volume, 14, 12, BLUE);
      }
      break;
  } 
  backingTrack_drawProgressBar();
  display.display();
}

void backingTrack_drawProgressBar() {
  int length = backingTrackPlayWav.lengthMillis();
  if (length == 0) {
    length = 1;
  }
  int x = 10 + ((float)backingTrack_previousPosition / (float)length) * 140;
  display.fillRect(0, 47, 160, 7, BLACK);
  display.drawFastHLine(10, 50, 140, GRAY);
  display.fillRect(10, 49, x - 10, 3, WHITE);
  display.fillCircle(x, 50, 3, WHITE);
}

void backingTrack_previousTrack() {
  if (backingTrackPlayWav.positionMillis() > 3000 && backingTrackPlayWav.isPlaying()) {
    backingTrackPlayWav.stop();
    backingTrack_previousPosition = 0;
  }
  else {
    if (--backingTrack_fileIndex < 0) {
      backingTrack_fileIndex = 0;
    }
    backingTrack_previousPosition = 0;
    backingTrackPlayWav.stop();
  }
}

void backingTrack_nextTrack() {
  if (++backingTrack_fileIndex >= backingTrack_lastIndex) {
    backingTrack_fileIndex = backingTrack_lastIndex;
  }
  else {
    backingTrack_previousPosition = 0;
  }
  backingTrackPlayWav.stop();
}

#endif